@{
    ViewData["Title"] = Model.Title;
}

@using Worktop.WebApp.ViewModels.Partials
@model Worktop.WebApp.ViewModels.TasksViewModel

<div class="text-center">
    <h3>Tasks</h3>
    <h5>@Model.SelectedWorkerName</h5>
    <div class="mt-3">
        <button class="btn btn-secondary dropdown-toggle p-2" type="button" id="dropdownMenuButton"
            data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            Change user
        </button>
        <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
            <a asp-action="Index" asp-controller="Tasks" class="dropdown-item"><strong>MY TASKS</strong></a>
            <hr>
            @foreach (var key in Model.WorkersDictionary.Keys)
            {
                <a asp-action="Worker" asp-controller="Tasks" asp-route-workerId=@key
                class="dropdown-item">@Model.WorkersDictionary[key]</a>
            }
        </div>
    </div>
</div>
<div class="container">
    <section class="row mt-3">
        <section class="col-md-4 mb-3">
            <h3 class="text-dark">Unassigned</h3>
            @foreach (var unassignedTask in Model.UnassignedTasks)
            {
                <div class="card bg-light">
                    <partial name="_TaskCard" model="@TaskCardViewModel.Build(unassignedTask, readOnly: true)" />
                </div>
            }
        </section>
        <section class="col-md-4 mb-3">
            <h3 class="text-primary">Assigned</h3>
            @foreach (var assignedTask in Model.AssignedTasks)
            {
                <div class="card bg-primary">
                    <partial name="_TaskCard" model="@TaskCardViewModel.Build(assignedTask, readOnly: true)" />
                </div>
            }
        </section>
        <section class="col-md-4 mb-3">
            <h3 class="text-info">In progress</h3>
            @foreach (var inProgressTask in Model.InProgressTasks)
            {
                <div class="card bg-info">
                    <partial name="_TaskCard" model="@TaskCardViewModel.Build(inProgressTask, readOnly: true)" />
                </div>
            }
        </section>
        <section class="col-md-4 mb-3">
            <h3 class="text-success">Completed</h3>
            @foreach (var completedTask in Model.CompletedTasks)
            {
                <div class="card bg-success">
                    <partial name="_TaskCard" model="@TaskCardViewModel.Build(completedTask, readOnly: true)" />
                </div>
            }
        </section>
        <section class="col-md-4 mb-3">
            <h3 class="text-danger">Not completed</h3>
            @foreach (var notCompletedTask in Model.NotCompletedTasks)
            {
                <div class="card bg-danger">
                    <partial name="_TaskCard" model="@TaskCardViewModel.Build(notCompletedTask, readOnly: true)" />
                </div>
            }
        </section>
    </section>
</div>

<partial name="_AlertPartial" model="@Model.Alert" />